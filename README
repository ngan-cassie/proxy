####################################################################
# CS:APP Proxy Server
# TEAM MEMBERS: 
# Ngan Nguyen nguyenh0@sewanee.edu
# David Allen allendj0@sewanee.edu
# Bob Makazhu makazbr0@sewanee.edu
####################################################################

This is  directory contains the files you will need for two versions of a Web proxy that logs web requests while filtering out requests/replies from potentially malicious sites. 

proxy.c
    A simple single-threaded HTTP proxy that 
        (1) accepts requests, logging each request to a text file
        (2) forwards the request to the end server unless destination is a potentially malicious site
        (3) returns the result back to the browser
    To run the proxy, type a command-line argument specifying the port number on which it should listen for its connection requests
    > ./proxy <port-number> 
conc-proxy.c
    Functions as the previous proxy version but also deas with multiple clients concurrently. It spawns separate threads to deal with each request. 
    To run the proxy, type a command-line argument specifying the port number on which it should listen for its connection requests
    > ./conc-proxy <port-number> 

Makefile
    This is the makefile that builds the proxy program.  Type "make"
    to build your solution, or "make clean" followed by "make" for a
    fresh build. 

    Type "make handin" to create the tarfile that you will be handing
    in. You can modify it any way you like. Your instructor will use your
    Makefile to build your proxy from source.

port-for-user.pl
    Generates a random port for a particular user
    usage: ./port-for-user.pl <userID>

free-port.sh
    Handy script that identifies an unused TCP port that you can use
    for your proxy or tiny. 
    usage: ./free-port.sh

driver.sh
    The autograder for Basic, Concurrency, and Cache.        
    usage: ./driver.sh

nop-server.py
     helper for the autograder.         

tiny
    Tiny Web server from the CS:APP text

